/**
 * Function that takes a callback, and returns a debounced version of it.
 * When calling the debounced function, it will wait for the specified time
 * before calling the original callback. If the debounced function is called
 * again before the time has passed, the timer will be reset.
 *
 * You can await the debounced function to get the value when it is eventually
 * called.
 *
 * The second parameter is the time to wait before calling the original callback.
 * Alternatively, it can also be a getter function that returns the time to wait.
 *
 *
 * @see {@link https://runed.dev/docs/utilities/use-debounce}
 */
export function useDebounce(callback, wait = 250) {
    let timeout = $state();
    let resolve = null;
    let reject = null;
    let promise = null;
    function reset() {
        timeout = undefined;
        promise = null;
        resolve = null;
        reject = null;
    }
    function debounced(...args) {
        if (timeout) {
            clearTimeout(timeout);
        }
        if (!promise) {
            promise = new Promise((res, rej) => {
                resolve = res;
                reject = rej;
            });
        }
        timeout = setTimeout(async () => {
            try {
                resolve?.(await callback.apply(this, args));
            }
            catch (error) {
                reject?.(error);
            }
            finally {
                reset();
            }
        }, typeof wait === "function" ? wait() : wait);
        return promise;
    }
    debounced.cancel = async () => {
        if (timeout === undefined) {
            // Wait one event loop to see if something triggered the debounced function
            await new Promise((resolve) => setTimeout(resolve, 0));
            if (timeout === undefined)
                return;
        }
        clearTimeout(timeout);
        reject?.("Cancelled");
        reset();
    };
    Object.defineProperty(debounced, "pending", {
        enumerable: true,
        get() {
            return !!timeout;
        },
    });
    return debounced;
}
