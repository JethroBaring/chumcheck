import { untrack } from "svelte";
/**
 * Finds the node with that ID and sets it to the boxed node.
 * Reactive using `$effect` to ensure when the ID or condition changes,
 * an update is triggered and new node is found.
 */
export function useRefById({ id, ref, deps = () => true, onRefChange = () => { } }) {
    const dependencies = $derived.by(() => deps());
    $effect(() => {
        // re-run when the ID changes.
        id.current;
        // re-run when the deps changes.
        dependencies;
        return untrack(() => {
            const node = document.getElementById(id.current);
            ref.current = node;
            onRefChange(ref.current);
        });
    });
    $effect(() => {
        return () => {
            ref.current = null;
            onRefChange(null);
        };
    });
}
